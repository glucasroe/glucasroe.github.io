---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';

const gardenNotes = await getCollection('garden', ({ data }) => {
  return data.publish !== false;
});

// Sort by updated date, then created date
const sortedNotes = gardenNotes.sort((a, b) => {
  const dateA = a.data.updated || a.data.created || new Date(0);
  const dateB = b.data.updated || b.data.created || new Date(0);
  return dateB.getTime() - dateA.getTime();
});

// Group by tags
const notesByTag = gardenNotes.reduce((acc, note) => {
  (note.data.tags || []).forEach(tag => {
    if (!acc[tag]) acc[tag] = [];
    acc[tag].push(note);
  });
  return acc;
}, {} as Record<string, typeof gardenNotes>);

const tagsSorted = Object.entries(notesByTag).sort((a, b) =>
  b[1].length - a[1].length
);
---

<BaseLayout title="Digital Garden">
  <div class="garden-index">
    <header>
      <h1>ðŸŒ± Digital Garden</h1>
      <p class="subtitle">
        A collection of interconnected notes, thoughts, and ideas in various stages of growth.
        This is a space for thinking in public and cultivating knowledge over time.
      </p>
    </header>

    {sortedNotes.length > 0 && (
      <section class="recent-updates">
        <h2>Recently Updated</h2>
        <ul class="note-list">
          {sortedNotes.slice(0, 15).map(note => (
            <li>
              <a href={`/garden/${note.slug}`}>{note.data.title}</a>
              {note.data.updated && (
                <time datetime={note.data.updated.toISOString()}>
                  {note.data.updated.toLocaleDateString()}
                </time>
              )}
            </li>
          ))}
        </ul>
      </section>
    )}

    {tagsSorted.length > 0 && (
      <section class="by-topic">
        <h2>Browse by Topic</h2>
        <div class="topics">
          {tagsSorted.map(([tag, notes]) => (
            <details>
              <summary>
                <strong>{tag}</strong>
                <span class="count">({notes.length})</span>
              </summary>
              <ul class="note-list">
                {notes.map(note => (
                  <li>
                    <a href={`/garden/${note.slug}`}>{note.data.title}</a>
                  </li>
                ))}
              </ul>
            </details>
          ))}
        </div>
      </section>
    )}

    {sortedNotes.length > 0 && (
      <section class="all-notes">
        <h2>All Notes ({gardenNotes.length})</h2>
        <ul class="note-list">
          {sortedNotes.map(note => (
            <li>
              <a href={`/garden/${note.slug}`}>{note.data.title}</a>
              {note.data.tags && note.data.tags.length > 0 && (
                <span class="inline-tags">
                  {note.data.tags.map(tag => (
                    <span class="tag">#{tag}</span>
                  ))}
                </span>
              )}
            </li>
          ))}
        </ul>
      </section>
    )}

    {sortedNotes.length === 0 && (
      <section class="empty-garden">
        <h2>Garden Coming Soon</h2>
        <p>The digital garden is ready to be planted! Add markdown files to <code>src/content/garden/</code> to see them appear here.</p>
        <p>You can also set up automatic syncing with your Obsidian vault using the scripts provided in the migration guide.</p>
      </section>
    )}
  </div>
</BaseLayout>

<style>
  .garden-index {
    max-width: 800px;
    margin: 0 auto;
  }

  header {
    margin-bottom: 3rem;
  }

  .subtitle {
    color: #666;
    font-size: 1.1rem;
    line-height: 1.6;
  }

  section {
    margin-bottom: 3rem;
  }

  h2 {
    border-bottom: 2px solid #e0e0e0;
    padding-bottom: 0.5rem;
    margin-bottom: 1.5rem;
  }

  .note-list {
    list-style: none;
    padding: 0;
  }

  .note-list li {
    padding: 0.5rem 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
    border-bottom: 1px solid #f0f0f0;
  }

  .note-list li:last-child {
    border-bottom: none;
  }

  .note-list a {
    text-decoration: none;
    color: #0066cc;
    flex: 1;
  }

  .note-list a:hover {
    text-decoration: underline;
  }

  .note-list time {
    font-size: 0.85rem;
    color: #999;
    white-space: nowrap;
  }

  .inline-tags {
    display: flex;
    gap: 0.25rem;
    flex-wrap: wrap;
  }

  .tag {
    background: #f0f0f0;
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    white-space: nowrap;
  }

  .topics details {
    margin-bottom: 1rem;
    border: 1px solid #e0e0e0;
    border-radius: 0.5rem;
    padding: 0.5rem 1rem;
  }

  .topics summary {
    cursor: pointer;
    padding: 0.5rem 0;
    font-size: 1.1rem;
  }

  .topics summary:hover {
    color: #0066cc;
  }

  .count {
    color: #999;
    font-size: 0.9rem;
    font-weight: normal;
  }

  .topics .note-list {
    margin-top: 0.5rem;
    padding-left: 1rem;
  }

  .empty-garden {
    text-align: center;
    padding: 2rem;
    background: #f9f9f9;
    border-radius: 0.5rem;
  }

  .empty-garden code {
    background: #e0e0e0;
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
    font-family: monospace;
  }
</style>